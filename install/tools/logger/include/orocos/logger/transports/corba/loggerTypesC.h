// This file is generated by omniidl (C++ backend)- omniORB_4_2. Do not edit.
#ifndef __loggerTypes_hh__
#define __loggerTypes_hh__

#ifndef __CORBA_H_EXTERNAL_GUARD__
#include <omniORB4/CORBA.h>
#endif

#ifndef  USE_stub_in_nt_dll
# define USE_stub_in_nt_dll_NOT_DEFINED_loggerTypes
#endif
#ifndef  USE_core_stub_in_nt_dll
# define USE_core_stub_in_nt_dll_NOT_DEFINED_loggerTypes
#endif
#ifndef  USE_dyn_stub_in_nt_dll
# define USE_dyn_stub_in_nt_dll_NOT_DEFINED_loggerTypes
#endif



#ifndef __stdTypes_hh_EXTERNAL_GUARD__
#define __stdTypes_hh_EXTERNAL_GUARD__
#include <std/transports/corba/stdTypesC.h>
#endif
#ifndef __baseTypes_hh_EXTERNAL_GUARD__
#define __baseTypes_hh_EXTERNAL_GUARD__
#include <base/transports/corba/baseTypesC.h>
#endif



#ifdef USE_stub_in_nt_dll
# ifndef USE_core_stub_in_nt_dll
#  define USE_core_stub_in_nt_dll
# endif
# ifndef USE_dyn_stub_in_nt_dll
#  define USE_dyn_stub_in_nt_dll
# endif
#endif

#ifdef _core_attr
# error "A local CPP macro _core_attr has already been defined."
#else
# ifdef  USE_core_stub_in_nt_dll
#  define _core_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _core_attr
# endif
#endif

#ifdef _dyn_attr
# error "A local CPP macro _dyn_attr has already been defined."
#else
# ifdef  USE_dyn_stub_in_nt_dll
#  define _dyn_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _dyn_attr
# endif
#endif



_CORBA_MODULE orogen

_CORBA_MODULE_BEG

  _CORBA_MODULE logger

  _CORBA_MODULE_BEG

    _CORBA_MODULE Corba

    _CORBA_MODULE_BEG

      enum Logger_STATES { Logger_EXCEPTION, Logger_FATAL_ERROR, Logger_INIT, Logger_PRE_OPERATIONAL, Logger_RUNNING, Logger_RUNTIME_ERROR, Logger_STOPPED /*, __max_Logger_STATES=0xffffffff */ };
      typedef Logger_STATES& Logger_STATES_out;

      _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_Logger_STATES;

      enum MarkerType { SingleEvent, Start, Stop /*, __max_MarkerType=0xffffffff */ };
      typedef MarkerType& MarkerType_out;

      _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_MarkerType;

      struct Annotations {
        typedef _CORBA_ConstrType_Variable_Var<Annotations> _var_type;

        
        base::Corba::Time time;

        ::CORBA::String_member stream_name;

        ::CORBA::String_member key;

        ::CORBA::String_member value;

      

        void operator>>= (cdrStream &) const;
        void operator<<= (cdrStream &);
      };

      typedef Annotations::_var_type Annotations_var;

      typedef _CORBA_ConstrType_Variable_OUT_arg< Annotations,Annotations_var > Annotations_out;

      _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_Annotations;

      struct Marker {
        typedef _CORBA_ConstrType_Variable_Var<Marker> _var_type;

        
        ::CORBA::Long id;

        MarkerType type;

        ::CORBA::String_member comment;

        base::Corba::Time time;

      

        void operator>>= (cdrStream &) const;
        void operator<<= (cdrStream &);
      };

      typedef Marker::_var_type Marker_var;

      typedef _CORBA_ConstrType_Variable_OUT_arg< Marker,Marker_var > Marker_out;

      _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_Marker;

      struct StreamMetadata {
        typedef _CORBA_ConstrType_Variable_Var<StreamMetadata> _var_type;

        
        ::CORBA::String_member key;

        ::CORBA::String_member value;

      

        void operator>>= (cdrStream &) const;
        void operator<<= (cdrStream &);
      };

      typedef StreamMetadata::_var_type StreamMetadata_var;

      typedef _CORBA_ConstrType_Variable_OUT_arg< StreamMetadata,StreamMetadata_var > StreamMetadata_out;

      _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_StreamMetadata;

      _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_vector__logger_StreamMetadata_;

      class vector__logger_StreamMetadata__var;

      class vector__logger_StreamMetadata_ : public _CORBA_Unbounded_Sequence< StreamMetadata >  {
      public:
        typedef vector__logger_StreamMetadata__var _var_type;
        inline vector__logger_StreamMetadata_() {}
        inline vector__logger_StreamMetadata_(const vector__logger_StreamMetadata_& _s)
          : _CORBA_Unbounded_Sequence< StreamMetadata > (_s) {}

        inline vector__logger_StreamMetadata_(_CORBA_ULong _max)
          : _CORBA_Unbounded_Sequence< StreamMetadata > (_max) {}
        inline vector__logger_StreamMetadata_(_CORBA_ULong _max, _CORBA_ULong _len, StreamMetadata* _val, _CORBA_Boolean _rel=0)
          : _CORBA_Unbounded_Sequence< StreamMetadata > (_max, _len, _val, _rel) {}

      

        inline vector__logger_StreamMetadata_& operator = (const vector__logger_StreamMetadata_& _s) {
          _CORBA_Unbounded_Sequence< StreamMetadata > ::operator=(_s);
          return *this;
        }
      };

      class vector__logger_StreamMetadata__out;

      class vector__logger_StreamMetadata__var {
      public:
        inline vector__logger_StreamMetadata__var() : _pd_seq(0) {}
        inline vector__logger_StreamMetadata__var(vector__logger_StreamMetadata_* _s) : _pd_seq(_s) {}
        inline vector__logger_StreamMetadata__var(const vector__logger_StreamMetadata__var& _s) {
          if (_s._pd_seq)  _pd_seq = new vector__logger_StreamMetadata_(*_s._pd_seq);
          else             _pd_seq = 0;
        }
        inline ~vector__logger_StreamMetadata__var() { if (_pd_seq)  delete _pd_seq; }
          
        inline vector__logger_StreamMetadata__var& operator = (vector__logger_StreamMetadata_* _s) {
          if (_pd_seq)  delete _pd_seq;
          _pd_seq = _s;
          return *this;
        }
        inline vector__logger_StreamMetadata__var& operator = (const vector__logger_StreamMetadata__var& _s) {
          if (&_s != this) {
            if (_s._pd_seq) {
              if (!_pd_seq)  _pd_seq = new vector__logger_StreamMetadata_;
              *_pd_seq = *_s._pd_seq;
            }
            else if (_pd_seq) {
              delete _pd_seq;
              _pd_seq = 0;
            }
          }
          return *this;
        }
        inline StreamMetadata& operator [] (_CORBA_ULong _s) {
          return (*_pd_seq)[_s];
        }

      

        inline vector__logger_StreamMetadata_* operator -> () { return _pd_seq; }
        inline const vector__logger_StreamMetadata_* operator -> () const { return _pd_seq; }
#if defined(__GNUG__)
        inline operator vector__logger_StreamMetadata_& () const { return *_pd_seq; }
#else
        inline operator const vector__logger_StreamMetadata_& () const { return *_pd_seq; }
        inline operator vector__logger_StreamMetadata_& () { return *_pd_seq; }
#endif
          
        inline const vector__logger_StreamMetadata_& in() const { return *_pd_seq; }
        inline vector__logger_StreamMetadata_&       inout()    { return *_pd_seq; }
        inline vector__logger_StreamMetadata_*&      out() {
          if (_pd_seq) { delete _pd_seq; _pd_seq = 0; }
          return _pd_seq;
        }
        inline vector__logger_StreamMetadata_* _retn() { vector__logger_StreamMetadata_* tmp = _pd_seq; _pd_seq = 0; return tmp; }
          
        friend class vector__logger_StreamMetadata__out;
        
      private:
        vector__logger_StreamMetadata_* _pd_seq;
      };

      class vector__logger_StreamMetadata__out {
      public:
        inline vector__logger_StreamMetadata__out(vector__logger_StreamMetadata_*& _s) : _data(_s) { _data = 0; }
        inline vector__logger_StreamMetadata__out(vector__logger_StreamMetadata__var& _s)
          : _data(_s._pd_seq) { _s = (vector__logger_StreamMetadata_*) 0; }
        inline vector__logger_StreamMetadata__out(const vector__logger_StreamMetadata__out& _s) : _data(_s._data) {}
        inline vector__logger_StreamMetadata__out& operator = (const vector__logger_StreamMetadata__out& _s) {
          _data = _s._data;
          return *this;
        }
        inline vector__logger_StreamMetadata__out& operator = (vector__logger_StreamMetadata_* _s) {
          _data = _s;
          return *this;
        }
        inline operator vector__logger_StreamMetadata_*&()  { return _data; }
        inline vector__logger_StreamMetadata_*& ptr()       { return _data; }
        inline vector__logger_StreamMetadata_* operator->() { return _data; }

        inline StreamMetadata& operator [] (_CORBA_ULong _i) {
          return (*_data)[_i];
        }

      

        vector__logger_StreamMetadata_*& _data;

      private:
        vector__logger_StreamMetadata__out();
        vector__logger_StreamMetadata__out& operator=(const vector__logger_StreamMetadata__var&);
      };

    _CORBA_MODULE_END

  _CORBA_MODULE_END

_CORBA_MODULE_END



_CORBA_MODULE POA_orogen
_CORBA_MODULE_BEG

  _CORBA_MODULE logger
  _CORBA_MODULE_BEG

    _CORBA_MODULE Corba
    _CORBA_MODULE_BEG

    _CORBA_MODULE_END

  _CORBA_MODULE_END

_CORBA_MODULE_END



_CORBA_MODULE OBV_orogen
_CORBA_MODULE_BEG

  _CORBA_MODULE logger
  _CORBA_MODULE_BEG

    _CORBA_MODULE Corba
    _CORBA_MODULE_BEG

    _CORBA_MODULE_END

  _CORBA_MODULE_END

_CORBA_MODULE_END





#undef _core_attr
#undef _dyn_attr

inline void operator >>=(orogen::logger::Corba::Logger_STATES _e, cdrStream& s) {
  ::operator>>=((::CORBA::ULong)_e, s);
}

inline void operator <<= (orogen::logger::Corba::Logger_STATES& _e, cdrStream& s) {
  ::CORBA::ULong _0RL_e;
  ::operator<<=(_0RL_e,s);
  if (_0RL_e <= orogen::logger::Corba::Logger_STOPPED) {
    _e = (orogen::logger::Corba::Logger_STATES) _0RL_e;
  }
  else {
    OMNIORB_THROW(MARSHAL,_OMNI_NS(MARSHAL_InvalidEnumValue),
                  (::CORBA::CompletionStatus)s.completion());
  }
}

void operator<<=(::CORBA::Any& _a, orogen::logger::Corba::Logger_STATES _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, orogen::logger::Corba::Logger_STATES& _s);

inline void operator >>=(orogen::logger::Corba::MarkerType _e, cdrStream& s) {
  ::operator>>=((::CORBA::ULong)_e, s);
}

inline void operator <<= (orogen::logger::Corba::MarkerType& _e, cdrStream& s) {
  ::CORBA::ULong _0RL_e;
  ::operator<<=(_0RL_e,s);
  if (_0RL_e <= orogen::logger::Corba::Stop) {
    _e = (orogen::logger::Corba::MarkerType) _0RL_e;
  }
  else {
    OMNIORB_THROW(MARSHAL,_OMNI_NS(MARSHAL_InvalidEnumValue),
                  (::CORBA::CompletionStatus)s.completion());
  }
}

void operator<<=(::CORBA::Any& _a, orogen::logger::Corba::MarkerType _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, orogen::logger::Corba::MarkerType& _s);

extern void operator<<=(::CORBA::Any& _a, const orogen::logger::Corba::Annotations& _s);
extern void operator<<=(::CORBA::Any& _a, orogen::logger::Corba::Annotations* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, orogen::logger::Corba::Annotations*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const orogen::logger::Corba::Annotations*& _sp);

extern void operator<<=(::CORBA::Any& _a, const orogen::logger::Corba::Marker& _s);
extern void operator<<=(::CORBA::Any& _a, orogen::logger::Corba::Marker* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, orogen::logger::Corba::Marker*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const orogen::logger::Corba::Marker*& _sp);

extern void operator<<=(::CORBA::Any& _a, const orogen::logger::Corba::StreamMetadata& _s);
extern void operator<<=(::CORBA::Any& _a, orogen::logger::Corba::StreamMetadata* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, orogen::logger::Corba::StreamMetadata*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const orogen::logger::Corba::StreamMetadata*& _sp);

void operator<<=(::CORBA::Any& _a, const orogen::logger::Corba::vector__logger_StreamMetadata_& _s);
void operator<<=(::CORBA::Any& _a, orogen::logger::Corba::vector__logger_StreamMetadata_* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, orogen::logger::Corba::vector__logger_StreamMetadata_*& _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const orogen::logger::Corba::vector__logger_StreamMetadata_*& _sp);





#ifdef   USE_stub_in_nt_dll_NOT_DEFINED_loggerTypes
# undef  USE_stub_in_nt_dll
# undef  USE_stub_in_nt_dll_NOT_DEFINED_loggerTypes
#endif
#ifdef   USE_core_stub_in_nt_dll_NOT_DEFINED_loggerTypes
# undef  USE_core_stub_in_nt_dll
# undef  USE_core_stub_in_nt_dll_NOT_DEFINED_loggerTypes
#endif
#ifdef   USE_dyn_stub_in_nt_dll_NOT_DEFINED_loggerTypes
# undef  USE_dyn_stub_in_nt_dll
# undef  USE_dyn_stub_in_nt_dll_NOT_DEFINED_loggerTypes
#endif

#endif  // __loggerTypes_hh__

